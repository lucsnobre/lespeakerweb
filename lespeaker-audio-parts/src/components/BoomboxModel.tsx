/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client";

import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { useRef } from 'react';
import * as THREE from 'three';
import { motion } from "framer-motion-3d";
import { GroupProps } from '@react-three/fiber';

export function BoomboxModel(props: GroupProps) {
  const { scene } = useGLTF('/boombox_1k.glb');
  const modelRef = useRef<THREE.Group>(null!);

  useFrame((state, delta) => {
    if(modelRef.current) {
      // Rotação suave
      modelRef.current.rotation.y += delta * 0.15;
      
      // Efeito de respiração suave
      const breathingScale = 1 + Math.sin(state.clock.elapsedTime) * 0.02;
      modelRef.current.scale.setScalar(breathingScale);
    }
  });

  // Clona a cena e aplica materiais personalizados
  const clonedScene = scene.clone();
  clonedScene.traverse((node) => {
    if (node instanceof THREE.Mesh) {
      if (node.material) {
        const material = node.material as THREE.Material;
        material.needsUpdate = true;
        
        if (material instanceof THREE.MeshStandardMaterial) {
          material.roughness = 0.3;
          material.metalness = 0.7;
          material.envMapIntensity = 1.5;
        }
      }
    }
  });

  return (
    <motion.group
      initial={{ y: -0.1 }}
      animate={{ y: 0.1 }}
      transition={{
        repeat: Infinity,
        repeatType: "reverse",
        duration: 2,
        ease: "easeInOut"
      }}
    >
      <primitive object={clonedScene} {...props} ref={modelRef} />
    </motion.group>
  );
}

useGLTF.preload('/boombox_1k.glb'); 