/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client";

import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { useRef } from 'react';
import * as THREE from 'three';
// (tipo de props genérico para grupos R3F)

export function BoomboxModel(props: any) {
  const { scene } = useGLTF('/boombox_1k.glb');
  const modelRef = useRef<THREE.Group>(null!);

  useFrame((state, delta) => {
    if(modelRef.current) {
      // Rotação suave
      modelRef.current.rotation.y += delta * 0.15;
      
      // Efeito de respiração suave
      const breathingScale = 1 + Math.sin(state.clock.elapsedTime) * 0.02;
      modelRef.current.scale.setScalar(breathingScale);

      // Animação de flutuação suave no eixo Y
      modelRef.current.position.y = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;
    }
  });

  // Clona a cena e aplica materiais personalizados
  const clonedScene = scene.clone();
  clonedScene.traverse((node) => {
    if (node instanceof THREE.Mesh) {
      if (node.material) {
        const material = node.material as THREE.Material;
        material.needsUpdate = true;
        
        if (material instanceof THREE.MeshStandardMaterial) {
          material.roughness = 0.3;
          material.metalness = 0.7;
          material.envMapIntensity = 1.5;
        }
      }
    }
  });

  return (
    <group ref={modelRef} {...props}>
      <primitive object={clonedScene} />
    </group>
  );
}

useGLTF.preload('/boombox_1k.glb'); 